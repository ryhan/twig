// Generated by CoffeeScript 1.4.0

/*
TwitterUser
Ryhan Hassan | ryhanh@me.com

Identifies a user's top friends.
*/


(function() {

  this.TwitterUser = (function() {

    function TwitterUser(username) {
      this.username = username.toLowerCase();
      this.friends;
    }

    TwitterUser.prototype.add_Weight = function(friend, weight) {
      if (friend == null) {
        return 0;
      }
      friend = friend.toLowerCase();
      if (!(this.friends != null)) {
        this.friends = {};
      }
      if (this.friends[friend] != null) {
        return this.friends[friend] += weight;
      } else {
        return this.friends[friend] = weight;
      }
    };

    TwitterUser.prototype.get_friends = function(cb) {
      var api, context, params,
        _this = this;
      if (this.friends != null) {
        return cb(this.friends);
      }
      api = "http://search.twitter.com/search.json?";
      params = "include_entities=true&count=100&rpp=99&q=" + this.username + "&callback=?";
      context = this;
      return $.getJSON(api + params, function(data) {
        return cb(_this._handleFriends(data, context));
      });
    };

    TwitterUser.prototype._handleFriends = function(d, context) {
      var tweet, _i, _len, _ref;
      _ref = d.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tweet = _ref[_i];
        if (tweet.from_user.toLowerCase() === context.username) {
          context.add_Weight(tweet.to_user, 10);
        } else {
          context.add_Weight(tweet.from_user, 3);
          context.add_Weight(tweet.to_user, 1);
        }
      }
      return context.friends;
    };

    TwitterUser.prototype.get_conversations = function(cb) {
      var api, context, names, params, query, set, user, users, _i, _len,
        _this = this;
      users = this.friends;
      /*
          sorted = _.last(_.sortBy(_.pairs users, (x) -> x[1]), 19)
          names = _.map(sorted, (x) -> x[0])
      */

      names = [];
      set = _.sortBy(_.pairs(users), function(x) {
        return x[1] * -1;
      });
      for (_i = 0, _len = set.length; _i < _len; _i++) {
        user = set[_i];
        if (user[1] > 2) {
          names.push(user[0]);
        }
      }
      query = encodeURIComponent(names.join(" OR "));
      api = "http://search.twitter.com/search.json?";
      params = "include_entities=true&count=100&rpp=99&q=" + query + "&callback=?";
      context = this;
      return $.getJSON(api + params, function(data) {
        return cb(_this._handleRelated(data, context));
      });
    };

    TwitterUser.prototype._handleRelated = function(d, context) {
      var important, knows, not_me, tweet, _i, _len, _ref;
      important = [];
      knows = function(name) {
        if (!(name != null)) {
          return false;
        }
        name = name.toLowerCase();
        return context.friends[name] != null;
      };
      not_me = function(name) {
        if (!(name != null)) {
          return false;
        }
        name = name.toLowerCase();
        return name !== context.username;
      };
      _ref = d.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tweet = _ref[_i];
        if (not_me(tweet.from_user) && (tweet.to_user != null)) {
          if (knows(tweet.from_user)) {
            important.push(tweet);
          }
        }
      }
      return important;
    };

    return TwitterUser;

  })();

}).call(this);
